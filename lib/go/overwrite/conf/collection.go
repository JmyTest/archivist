// Code generated by archivist. DO NOT EDIT.

package conf

type Collection struct {
	Extension     `json:"-"`
	filename2Conf map[string]interface{}

	AConf AConf
	BConf BConf
	CConf CConf
	DConf DConf
	EConf EConf
	FConf FConf
	GConf GConf
	HConf HConf
	IConf IConf
	JConf JConf
	KConf KConf
}

func (this *Collection) Filename2Conf() map[string]interface{} {
	return this.filename2Conf
}

func NewCollection() interface{} {
	c := &Collection{}
	c.FixPointers()
	return c
}

type binder interface {
	bindRefs(c *Collection) error
}

func (this *Collection) FixPointers() {
	this.filename2Conf = map[string]interface{}{
		"a.json": &this.AConf,
		"b.json": &this.BConf,
		"c.json": &this.CConf,
		"d.json": &this.DConf,
		"e.json": &this.EConf,
		"f.json": &this.FConf,
		"g.json": &this.GConf,
		"h.json": &this.HConf,
		"i.json": &this.IConf,
		"j.json": &this.JConf,
		"k.json": &this.KConf,
	}
}

func (this *Collection) BindRefs() error {
	for _, v := range this.filename2Conf {
		if err := v.(binder).bindRefs(this); err != nil {
			return err
		}
	}
	return nil
}

var revRefGraph = map[string][]string{}

func (this *Collection) RevRefGraph() map[string][]string {
	return revRefGraph
}
