// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	archivist "github.com/kingsgroupos/archivist/lib/go/archivist"
	wtime "github.com/kingsgroupos/misc/wtime"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(in *jlexer.Lexer, out *Workbook1ConfItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "MyBool":
			out.MyBool = bool(in.Bool())
		case "MyBoolArray":
			if in.IsNull() {
				in.Skip()
				out.MyBoolArray = nil
			} else {
				in.Delim('[')
				if out.MyBoolArray == nil {
					if !in.IsDelim(']') {
						out.MyBoolArray = make([]bool, 0, 64)
					} else {
						out.MyBoolArray = []bool{}
					}
				} else {
					out.MyBoolArray = (out.MyBoolArray)[:0]
				}
				for !in.IsDelim(']') {
					var v1 bool
					v1 = bool(in.Bool())
					out.MyBoolArray = append(out.MyBoolArray, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyDatetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MyDatetime).UnmarshalJSON(data))
			}
		case "MyDatetimeArray":
			if in.IsNull() {
				in.Skip()
				out.MyDatetimeArray = nil
			} else {
				in.Delim('[')
				if out.MyDatetimeArray == nil {
					if !in.IsDelim(']') {
						out.MyDatetimeArray = make([]time.Time, 0, 2)
					} else {
						out.MyDatetimeArray = []time.Time{}
					}
				} else {
					out.MyDatetimeArray = (out.MyDatetimeArray)[:0]
				}
				for !in.IsDelim(']') {
					var v2 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v2).UnmarshalJSON(data))
					}
					out.MyDatetimeArray = append(out.MyDatetimeArray, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyDuration":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MyDuration).UnmarshalJSON(data))
			}
		case "MyDurationArray":
			if in.IsNull() {
				in.Skip()
				out.MyDurationArray = nil
			} else {
				in.Delim('[')
				if out.MyDurationArray == nil {
					if !in.IsDelim(']') {
						out.MyDurationArray = make([]wtime.Duration, 0, 8)
					} else {
						out.MyDurationArray = []wtime.Duration{}
					}
				} else {
					out.MyDurationArray = (out.MyDurationArray)[:0]
				}
				for !in.IsDelim(']') {
					var v3 wtime.Duration
					if data := in.Raw(); in.Ok() {
						in.AddError((v3).UnmarshalJSON(data))
					}
					out.MyDurationArray = append(out.MyDurationArray, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyFloat":
			out.MyFloat = float64(in.Float64())
		case "MyFloatArray":
			if in.IsNull() {
				in.Skip()
				out.MyFloatArray = nil
			} else {
				in.Delim('[')
				if out.MyFloatArray == nil {
					if !in.IsDelim(']') {
						out.MyFloatArray = make([]float64, 0, 8)
					} else {
						out.MyFloatArray = []float64{}
					}
				} else {
					out.MyFloatArray = (out.MyFloatArray)[:0]
				}
				for !in.IsDelim(']') {
					var v4 float64
					v4 = float64(in.Float64())
					out.MyFloatArray = append(out.MyFloatArray, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyI18N":
			out.MyI18N = archivist.I18n(in.String())
		case "MyI18NArray":
			if in.IsNull() {
				in.Skip()
				out.MyI18NArray = nil
			} else {
				in.Delim('[')
				if out.MyI18NArray == nil {
					if !in.IsDelim(']') {
						out.MyI18NArray = make([]archivist.I18n, 0, 4)
					} else {
						out.MyI18NArray = []archivist.I18n{}
					}
				} else {
					out.MyI18NArray = (out.MyI18NArray)[:0]
				}
				for !in.IsDelim(']') {
					var v5 archivist.I18n
					v5 = archivist.I18n(in.String())
					out.MyI18NArray = append(out.MyI18NArray, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyInt":
			out.MyInt = int64(in.Int64())
		case "MyIntArray":
			if in.IsNull() {
				in.Skip()
				out.MyIntArray = nil
			} else {
				in.Delim('[')
				if out.MyIntArray == nil {
					if !in.IsDelim(']') {
						out.MyIntArray = make([]int64, 0, 8)
					} else {
						out.MyIntArray = []int64{}
					}
				} else {
					out.MyIntArray = (out.MyIntArray)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int64
					v6 = int64(in.Int64())
					out.MyIntArray = append(out.MyIntArray, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyRef":
			out.MyRef = int64(in.Int64())
		case "MyRefArray":
			if in.IsNull() {
				in.Skip()
				out.MyRefArray = nil
			} else {
				in.Delim('[')
				if out.MyRefArray == nil {
					if !in.IsDelim(']') {
						out.MyRefArray = make([]int64, 0, 8)
					} else {
						out.MyRefArray = []int64{}
					}
				} else {
					out.MyRefArray = (out.MyRefArray)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int64
					v7 = int64(in.Int64())
					out.MyRefArray = append(out.MyRefArray, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MyString":
			out.MyString = string(in.String())
		case "MyStringArray":
			if in.IsNull() {
				in.Skip()
				out.MyStringArray = nil
			} else {
				in.Delim('[')
				if out.MyStringArray == nil {
					if !in.IsDelim(']') {
						out.MyStringArray = make([]string, 0, 4)
					} else {
						out.MyStringArray = []string{}
					}
				} else {
					out.MyStringArray = (out.MyStringArray)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.MyStringArray = append(out.MyStringArray, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(out *jwriter.Writer, in Workbook1ConfItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"MyBool\":"
		out.RawString(prefix)
		out.Bool(bool(in.MyBool))
	}
	{
		const prefix string = ",\"MyBoolArray\":"
		out.RawString(prefix)
		if in.MyBoolArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.MyBoolArray {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyDatetime\":"
		out.RawString(prefix)
		out.Raw((in.MyDatetime).MarshalJSON())
	}
	{
		const prefix string = ",\"MyDatetimeArray\":"
		out.RawString(prefix)
		if in.MyDatetimeArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.MyDatetimeArray {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyDuration\":"
		out.RawString(prefix)
		out.Raw((in.MyDuration).MarshalJSON())
	}
	{
		const prefix string = ",\"MyDurationArray\":"
		out.RawString(prefix)
		if in.MyDurationArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.MyDurationArray {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Raw((v14).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyFloat\":"
		out.RawString(prefix)
		out.Float64(float64(in.MyFloat))
	}
	{
		const prefix string = ",\"MyFloatArray\":"
		out.RawString(prefix)
		if in.MyFloatArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.MyFloatArray {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyI18N\":"
		out.RawString(prefix)
		out.String(string(in.MyI18N))
	}
	{
		const prefix string = ",\"MyI18NArray\":"
		out.RawString(prefix)
		if in.MyI18NArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.MyI18NArray {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyInt\":"
		out.RawString(prefix)
		out.Int64(int64(in.MyInt))
	}
	{
		const prefix string = ",\"MyIntArray\":"
		out.RawString(prefix)
		if in.MyIntArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.MyIntArray {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyRef\":"
		out.RawString(prefix)
		out.Int64(int64(in.MyRef))
	}
	{
		const prefix string = ",\"MyRefArray\":"
		out.RawString(prefix)
		if in.MyRefArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.MyRefArray {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MyString\":"
		out.RawString(prefix)
		out.String(string(in.MyString))
	}
	{
		const prefix string = ",\"MyStringArray\":"
		out.RawString(prefix)
		if in.MyStringArray == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.MyStringArray {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workbook1ConfItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workbook1ConfItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workbook1ConfItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workbook1ConfItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(l, v)
}
func easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(in *jlexer.Lexer, out *Workbook1Conf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(Workbook1Conf)
		for !in.IsDelim('}') {
			key := int64(in.Int64Str())
			in.WantColon()
			var v25 *Workbook1ConfItem
			if in.IsNull() {
				in.Skip()
				v25 = nil
			} else {
				if v25 == nil {
					v25 = new(Workbook1ConfItem)
				}
				(*v25).UnmarshalEasyJSON(in)
			}
			(*out)[key] = v25
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(out *jwriter.Writer, in Workbook1Conf) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v26First := true
		for v26Name, v26Value := range in {
			if v26First {
				v26First = false
			} else {
				out.RawByte(',')
			}
			out.Int64Str(int64(v26Name))
			out.RawByte(':')
			if v26Value == nil {
				out.RawString("null")
			} else {
				(*v26Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Workbook1Conf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workbook1Conf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE17c641EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workbook1Conf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workbook1Conf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE17c641DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf1(l, v)
}
