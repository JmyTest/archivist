// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(in *jlexer.Lexer, out *ChimeracoderConf_435991868) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "node_id":
			out.NodeId = string(in.String())
		case "spdx_id":
			out.SpdxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(out *jwriter.Writer, in ChimeracoderConf_435991868) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.String(string(in.NodeId))
	}
	{
		const prefix string = ",\"spdx_id\":"
		out.RawString(prefix)
		out.String(string(in.SpdxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChimeracoderConf_435991868) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChimeracoderConf_435991868) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChimeracoderConf_435991868) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChimeracoderConf_435991868) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf(l, v)
}
func easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(in *jlexer.Lexer, out *ChimeracoderConf_240645118) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "gravatar_id":
			out.GravatarId = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "login":
			out.Login = string(in.String())
		case "node_id":
			out.NodeId = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(out *jwriter.Writer, in ChimeracoderConf_240645118) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarId))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.String(string(in.NodeId))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChimeracoderConf_240645118) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChimeracoderConf_240645118) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChimeracoderConf_240645118) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChimeracoderConf_240645118) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConfChimeracoderConf1(l, v)
}
func easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(in *jlexer.Lexer, out *ChimeracoderConf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "archive_url":
			out.ArchiveUrl = string(in.String())
		case "archived":
			out.Archived = bool(in.Bool())
		case "assignees_url":
			out.AssigneesUrl = string(in.String())
		case "blobs_url":
			out.BlobsUrl = string(in.String())
		case "branches_url":
			out.BranchesUrl = string(in.String())
		case "clone_url":
			out.CloneUrl = string(in.String())
		case "collaborators_url":
			out.CollaboratorsUrl = string(in.String())
		case "comments_url":
			out.CommentsUrl = string(in.String())
		case "commits_url":
			out.CommitsUrl = string(in.String())
		case "compare_url":
			out.CompareUrl = string(in.String())
		case "contents_url":
			out.ContentsUrl = string(in.String())
		case "contributors_url":
			out.ContributorsUrl = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "deployments_url":
			out.DeploymentsUrl = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "downloads_url":
			out.DownloadsUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "fork":
			out.Fork = bool(in.Bool())
		case "forks":
			out.Forks = int64(in.Int64())
		case "forks_count":
			out.ForksCount = int64(in.Int64())
		case "forks_url":
			out.ForksUrl = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "git_commits_url":
			out.GitCommitsUrl = string(in.String())
		case "git_refs_url":
			out.GitRefsUrl = string(in.String())
		case "git_tags_url":
			out.GitTagsUrl = string(in.String())
		case "git_url":
			out.GitUrl = string(in.String())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_pages":
			out.HasPages = bool(in.Bool())
		case "has_projects":
			out.HasProjects = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "homepage":
			out.Homepage = string(in.String())
		case "hooks_url":
			out.HooksUrl = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "issue_comment_url":
			out.IssueCommentUrl = string(in.String())
		case "issue_events_url":
			out.IssueEventsUrl = string(in.String())
		case "issues_url":
			out.IssuesUrl = string(in.String())
		case "keys_url":
			out.KeysUrl = string(in.String())
		case "labels_url":
			out.LabelsUrl = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "languages_url":
			out.LanguagesUrl = string(in.String())
		case "license":
			if in.IsNull() {
				in.Skip()
				out.License = nil
			} else {
				if out.License == nil {
					out.License = new(ChimeracoderConf_435991868)
				}
				(*out.License).UnmarshalEasyJSON(in)
			}
		case "merges_url":
			out.MergesUrl = string(in.String())
		case "milestones_url":
			out.MilestonesUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "network_count":
			out.NetworkCount = int64(in.Int64())
		case "node_id":
			out.NodeId = string(in.String())
		case "notifications_url":
			out.NotificationsUrl = string(in.String())
		case "open_issues":
			out.OpenIssues = int64(in.Int64())
		case "open_issues_count":
			out.OpenIssuesCount = int64(in.Int64())
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(ChimeracoderConf_240645118)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "private":
			out.Private = bool(in.Bool())
		case "pulls_url":
			out.PullsUrl = string(in.String())
		case "pushed_at":
			out.PushedAt = string(in.String())
		case "releases_url":
			out.ReleasesUrl = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "ssh_url":
			out.SshUrl = string(in.String())
		case "stargazers_count":
			out.StargazersCount = int64(in.Int64())
		case "stargazers_url":
			out.StargazersUrl = string(in.String())
		case "statuses_url":
			out.StatusesUrl = string(in.String())
		case "subscribers_count":
			out.SubscribersCount = int64(in.Int64())
		case "subscribers_url":
			out.SubscribersUrl = string(in.String())
		case "subscription_url":
			out.SubscriptionUrl = string(in.String())
		case "svn_url":
			out.SvnUrl = string(in.String())
		case "tags_url":
			out.TagsUrl = string(in.String())
		case "teams_url":
			out.TeamsUrl = string(in.String())
		case "trees_url":
			out.TreesUrl = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "watchers":
			out.Watchers = int64(in.Int64())
		case "watchers_count":
			out.WatchersCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(out *jwriter.Writer, in ChimeracoderConf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"archive_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.ArchiveUrl))
	}
	{
		const prefix string = ",\"archived\":"
		out.RawString(prefix)
		out.Bool(bool(in.Archived))
	}
	{
		const prefix string = ",\"assignees_url\":"
		out.RawString(prefix)
		out.String(string(in.AssigneesUrl))
	}
	{
		const prefix string = ",\"blobs_url\":"
		out.RawString(prefix)
		out.String(string(in.BlobsUrl))
	}
	{
		const prefix string = ",\"branches_url\":"
		out.RawString(prefix)
		out.String(string(in.BranchesUrl))
	}
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix)
		out.String(string(in.CloneUrl))
	}
	{
		const prefix string = ",\"collaborators_url\":"
		out.RawString(prefix)
		out.String(string(in.CollaboratorsUrl))
	}
	{
		const prefix string = ",\"comments_url\":"
		out.RawString(prefix)
		out.String(string(in.CommentsUrl))
	}
	{
		const prefix string = ",\"commits_url\":"
		out.RawString(prefix)
		out.String(string(in.CommitsUrl))
	}
	{
		const prefix string = ",\"compare_url\":"
		out.RawString(prefix)
		out.String(string(in.CompareUrl))
	}
	{
		const prefix string = ",\"contents_url\":"
		out.RawString(prefix)
		out.String(string(in.ContentsUrl))
	}
	{
		const prefix string = ",\"contributors_url\":"
		out.RawString(prefix)
		out.String(string(in.ContributorsUrl))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"deployments_url\":"
		out.RawString(prefix)
		out.String(string(in.DeploymentsUrl))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"downloads_url\":"
		out.RawString(prefix)
		out.String(string(in.DownloadsUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"forks\":"
		out.RawString(prefix)
		out.Int64(int64(in.Forks))
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ForksCount))
	}
	{
		const prefix string = ",\"forks_url\":"
		out.RawString(prefix)
		out.String(string(in.ForksUrl))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"git_commits_url\":"
		out.RawString(prefix)
		out.String(string(in.GitCommitsUrl))
	}
	{
		const prefix string = ",\"git_refs_url\":"
		out.RawString(prefix)
		out.String(string(in.GitRefsUrl))
	}
	{
		const prefix string = ",\"git_tags_url\":"
		out.RawString(prefix)
		out.String(string(in.GitTagsUrl))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitUrl))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_pages\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPages))
	}
	{
		const prefix string = ",\"has_projects\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasProjects))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"hooks_url\":"
		out.RawString(prefix)
		out.String(string(in.HooksUrl))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"issue_comment_url\":"
		out.RawString(prefix)
		out.String(string(in.IssueCommentUrl))
	}
	{
		const prefix string = ",\"issue_events_url\":"
		out.RawString(prefix)
		out.String(string(in.IssueEventsUrl))
	}
	{
		const prefix string = ",\"issues_url\":"
		out.RawString(prefix)
		out.String(string(in.IssuesUrl))
	}
	{
		const prefix string = ",\"keys_url\":"
		out.RawString(prefix)
		out.String(string(in.KeysUrl))
	}
	{
		const prefix string = ",\"labels_url\":"
		out.RawString(prefix)
		out.String(string(in.LabelsUrl))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"languages_url\":"
		out.RawString(prefix)
		out.String(string(in.LanguagesUrl))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		if in.License == nil {
			out.RawString("null")
		} else {
			(*in.License).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"merges_url\":"
		out.RawString(prefix)
		out.String(string(in.MergesUrl))
	}
	{
		const prefix string = ",\"milestones_url\":"
		out.RawString(prefix)
		out.String(string(in.MilestonesUrl))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"network_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.NetworkCount))
	}
	{
		const prefix string = ",\"node_id\":"
		out.RawString(prefix)
		out.String(string(in.NodeId))
	}
	{
		const prefix string = ",\"notifications_url\":"
		out.RawString(prefix)
		out.String(string(in.NotificationsUrl))
	}
	{
		const prefix string = ",\"open_issues\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenIssues))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			(*in.Owner).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"pulls_url\":"
		out.RawString(prefix)
		out.String(string(in.PullsUrl))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.String(string(in.PushedAt))
	}
	{
		const prefix string = ",\"releases_url\":"
		out.RawString(prefix)
		out.String(string(in.ReleasesUrl))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SshUrl))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.StargazersCount))
	}
	{
		const prefix string = ",\"stargazers_url\":"
		out.RawString(prefix)
		out.String(string(in.StargazersUrl))
	}
	{
		const prefix string = ",\"statuses_url\":"
		out.RawString(prefix)
		out.String(string(in.StatusesUrl))
	}
	{
		const prefix string = ",\"subscribers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.SubscribersCount))
	}
	{
		const prefix string = ",\"subscribers_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscribersUrl))
	}
	{
		const prefix string = ",\"subscription_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionUrl))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnUrl))
	}
	{
		const prefix string = ",\"tags_url\":"
		out.RawString(prefix)
		out.String(string(in.TagsUrl))
	}
	{
		const prefix string = ",\"teams_url\":"
		out.RawString(prefix)
		out.String(string(in.TeamsUrl))
	}
	{
		const prefix string = ",\"trees_url\":"
		out.RawString(prefix)
		out.String(string(in.TreesUrl))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"watchers\":"
		out.RawString(prefix)
		out.Int64(int64(in.Watchers))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.WatchersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChimeracoderConf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChimeracoderConf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ee8f398EncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChimeracoderConf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChimeracoderConf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ee8f398DecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(l, v)
}
