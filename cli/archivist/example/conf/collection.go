// Code generated by archivist. DO NOT EDIT.

package conf

type Collection struct {
	Extension     `json:"-"`
	filename2Conf map[string]interface{}

	ChimeracoderConf ChimeracoderConf
	ComplexConf      ComplexConf
	ExampleConf      ExampleConf
	ExampleArrayConf ExampleArrayConf
	ExtConf          ExtConf
	FloatsConf       FloatsConf
	GithubConf       GithubConf
	I18NConf         I18NConf
	VersionConf      VersionConf
	Workbook1Conf    Workbook1Conf
	Workbook2Conf    Workbook2Conf
}

func (this *Collection) Filename2Conf() map[string]interface{} {
	return this.filename2Conf
}

func NewCollection() interface{} {
	c := &Collection{}
	c.FixPointers()
	return c
}

type binder interface {
	bindRefs(c *Collection) error
}

func (this *Collection) FixPointers() {
	this.filename2Conf = map[string]interface{}{
		"chimeracoder.json": &this.ChimeracoderConf,
		"complex.json":      &this.ComplexConf,
		"example.json":      &this.ExampleConf,
		"exampleArray.json": &this.ExampleArrayConf,
		"ext.json":          &this.ExtConf,
		"floats.json":       &this.FloatsConf,
		"github.json":       &this.GithubConf,
		"i18n.json":         &this.I18NConf,
		"version.json":      &this.VersionConf,
		"workbook1.json":    &this.Workbook1Conf,
		"workbook2.json":    &this.Workbook2Conf,
	}
}

func (this *Collection) BindRefs() error {
	for _, v := range this.filename2Conf {
		if err := v.(binder).bindRefs(this); err != nil {
			return err
		}
	}
	return nil
}

var revRefGraph = map[string][]string{
	"workbook2.json": {
		"complex.json",
		"workbook1.json",
	},
}

func (this *Collection) RevRefGraph() map[string][]string {
	return revRefGraph
}
