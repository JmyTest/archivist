// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(in *jlexer.Lexer, out *Workbook2ConfItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "MyBool":
			out.MyBool = bool(in.Bool())
		case "MyFloatVar":
			out.MyFloatVar = float64(in.Float64())
		case "MyIntVar":
			out.MyIntVar = int64(in.Int64())
		case "MyStringVar":
			out.MyStringVar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(out *jwriter.Writer, in Workbook2ConfItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"MyBool\":"
		out.RawString(prefix)
		out.Bool(bool(in.MyBool))
	}
	{
		const prefix string = ",\"MyFloatVar\":"
		out.RawString(prefix)
		out.Float64(float64(in.MyFloatVar))
	}
	{
		const prefix string = ",\"MyIntVar\":"
		out.RawString(prefix)
		out.Int64(int64(in.MyIntVar))
	}
	{
		const prefix string = ",\"MyStringVar\":"
		out.RawString(prefix)
		out.String(string(in.MyStringVar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workbook2ConfItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workbook2ConfItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workbook2ConfItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workbook2ConfItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf(l, v)
}
func easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(in *jlexer.Lexer, out *Workbook2Conf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(Workbook2Conf)
		for !in.IsDelim('}') {
			key := int64(in.Int64Str())
			in.WantColon()
			var v1 *Workbook2ConfItem
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Workbook2ConfItem)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(out *jwriter.Writer, in Workbook2Conf) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.Int64Str(int64(v2Name))
			out.RawByte(':')
			if v2Value == nil {
				out.RawString("null")
			} else {
				(*v2Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Workbook2Conf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workbook2Conf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a2ceeaaEncodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workbook2Conf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workbook2Conf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a2ceeaaDecodeGitlabEeFunplusIoWatcherWatcherArchivistCliArchivistExampleConf1(l, v)
}
