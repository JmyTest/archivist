// Code generated by archivist. DO NOT EDIT.

package conf

import (
	"time"

	"github.com/kingsgroupos/archivist/lib/go/archivist"
	"github.com/kingsgroupos/misc/wtime"
	"github.com/pkg/errors"
)

var (
	_ = time.After
	_ = errors.New
	_ = archivist.NewArchivist
	_ = wtime.ParseDuration
)

// easyjson:json
type Workbook1Conf map[int64]*Workbook1ConfItem

// Workbook1ConfItem represents /map[]
type Workbook1ConfItem struct {
	ID              int64                `json:"ID"`
	MyBool          bool                 `json:"MyBool"`          // 布尔值
	MyBoolArray     []bool               `json:"MyBoolArray"`     // 布尔数组
	MyDatetime      time.Time            `json:"MyDatetime"`      // 时间
	MyDatetimeArray []time.Time          `json:"MyDatetimeArray"` // 时间数组
	MyDuration      wtime.Duration       `json:"MyDuration"`      // 时长
	MyDurationArray []wtime.Duration     `json:"MyDurationArray"` // 时长数组
	MyFloat         float64              `json:"MyFloat"`         // 浮点数
	MyFloatArray    []float64            `json:"MyFloatArray"`    // 浮点数数组
	MyI18N          archivist.I18n       `json:"MyI18N"`          // i18n字符串
	MyI18NArray     []archivist.I18n     `json:"MyI18NArray"`     // i18n字符串数组
	MyInt           int64                `json:"MyInt"`           // 整数
	MyIntArray      []int64              `json:"MyIntArray"`      // 整数数组
	MyRef           int64                `json:"MyRef"`           // 外部引用
	MyRefRef        *Workbook2ConfItem   `json:"-"`               // 外部引用
	MyRefArray      []int64              `json:"MyRefArray"`      // 外部引用数组
	MyRefArrayRef   []*Workbook2ConfItem `json:"-"`               // 外部引用数组
	MyString        string               `json:"MyString"`        // 字符串
	MyStringArray   []string             `json:"MyStringArray"`   // 字符串数组
}

func (this *Workbook1Conf) bindRefs(c *Collection) error {
	if this == nil {
		return nil
	}

	var ok bool
	_ = ok
	v := *this
	for _, v := range v {
		if err := v.bindRefs(c); err != nil {
			return err
		}
	}

	return nil
}

func (this *Workbook1ConfItem) bindRefs(c *Collection) error {
	if this == nil {
		return nil
	}

	var ok bool
	_ = ok
	if this.MyRef != 0 {
		this.MyRefRef, ok = c.Workbook2Conf[this.MyRef]
		if !ok {
			return errors.Errorf("<workbook1.json/map[]/MyRef> workbook2[%d] does NOT exist", this.MyRef)
		}
	} else {
		this.MyRefRef = nil
	}
	{
		this.MyRefArrayRef = make([]*Workbook2ConfItem, len(this.MyRefArray))
		v := this.MyRefArray
		r := this.MyRefArrayRef
		for k, v := range v {
			if v != 0 {
				r[k], ok = c.Workbook2Conf[v]
				if !ok {
					return errors.Errorf("<workbook1.json/map[]/MyRefArray> workbook2[%d] does NOT exist", v)
				}
			} else {
				r[k] = nil
			}
		}
	}

	return nil
}
