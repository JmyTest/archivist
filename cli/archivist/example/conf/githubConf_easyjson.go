// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(in *jlexer.Lexer, out *GithubConf_570840785) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin":
			out.Admin = bool(in.Bool())
		case "pull":
			out.Pull = bool(in.Bool())
		case "push":
			out.Push = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(out *jwriter.Writer, in GithubConf_570840785) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Admin))
	}
	{
		const prefix string = ",\"pull\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pull))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		out.Bool(bool(in.Push))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_570840785) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_570840785) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_570840785) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_570840785) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(in *jlexer.Lexer, out *GithubConf_433431318) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "gravatar_id":
			out.GravatarId = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "login":
			out.Login = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(out *jwriter.Writer, in GithubConf_433431318) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarId))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_433431318) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_433431318) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_433431318) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_433431318) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf1(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(in *jlexer.Lexer, out *GithubConf_267759930) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clone_url":
			out.CloneUrl = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "fork":
			out.Fork = bool(in.Bool())
		case "forks_count":
			out.ForksCount = int64(in.Int64())
		case "full_name":
			out.FullName = string(in.String())
		case "git_url":
			out.GitUrl = string(in.String())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "homepage":
			out.Homepage = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "mirror_url":
			out.MirrorUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "open_issues_count":
			out.OpenIssuesCount = int64(in.Int64())
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(GithubConf_229071146)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				if out.Permissions == nil {
					out.Permissions = new(GithubConf_2094552156)
				}
				(*out.Permissions).UnmarshalEasyJSON(in)
			}
		case "private":
			out.Private = bool(in.Bool())
		case "pushed_at":
			out.PushedAt = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "ssh_url":
			out.SshUrl = string(in.String())
		case "stargazers_count":
			out.StargazersCount = int64(in.Int64())
		case "svn_url":
			out.SvnUrl = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "watchers_count":
			out.WatchersCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(out *jwriter.Writer, in GithubConf_267759930) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.CloneUrl))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ForksCount))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitUrl))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"mirror_url\":"
		out.RawString(prefix)
		out.String(string(in.MirrorUrl))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			(*in.Owner).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil {
			out.RawString("null")
		} else {
			(*in.Permissions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.String(string(in.PushedAt))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SshUrl))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.StargazersCount))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnUrl))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.WatchersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_267759930) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_267759930) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_267759930) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_267759930) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf2(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(in *jlexer.Lexer, out *GithubConf_249756142) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin":
			out.Admin = bool(in.Bool())
		case "pull":
			out.Pull = bool(in.Bool())
		case "push":
			out.Push = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(out *jwriter.Writer, in GithubConf_249756142) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Admin))
	}
	{
		const prefix string = ",\"pull\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pull))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		out.Bool(bool(in.Push))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_249756142) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_249756142) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_249756142) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_249756142) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf3(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(in *jlexer.Lexer, out *GithubConf_240645118) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "gravatar_id":
			out.GravatarId = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "login":
			out.Login = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(out *jwriter.Writer, in GithubConf_240645118) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarId))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_240645118) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_240645118) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_240645118) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_240645118) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf4(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(in *jlexer.Lexer, out *GithubConf_229071146) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "gravatar_id":
			out.GravatarId = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "login":
			out.Login = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(out *jwriter.Writer, in GithubConf_229071146) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarId))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_229071146) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_229071146) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_229071146) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_229071146) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf5(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(in *jlexer.Lexer, out *GithubConf_216391827) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar_url":
			out.AvatarUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "gravatar_id":
			out.GravatarId = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "login":
			out.Login = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(out *jwriter.Writer, in GithubConf_216391827) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvatarUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarId))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_216391827) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_216391827) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_216391827) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_216391827) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf6(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(in *jlexer.Lexer, out *GithubConf_2094552156) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin":
			out.Admin = bool(in.Bool())
		case "pull":
			out.Pull = bool(in.Bool())
		case "push":
			out.Push = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(out *jwriter.Writer, in GithubConf_2094552156) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Admin))
	}
	{
		const prefix string = ",\"pull\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pull))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		out.Bool(bool(in.Push))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_2094552156) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_2094552156) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_2094552156) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_2094552156) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf7(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(in *jlexer.Lexer, out *GithubConf_2003163775) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clone_url":
			out.CloneUrl = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "fork":
			out.Fork = bool(in.Bool())
		case "forks_count":
			out.ForksCount = int64(in.Int64())
		case "full_name":
			out.FullName = string(in.String())
		case "git_url":
			out.GitUrl = string(in.String())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "homepage":
			out.Homepage = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "mirror_url":
			out.MirrorUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "open_issues_count":
			out.OpenIssuesCount = int64(in.Int64())
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(GithubConf_433431318)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				if out.Permissions == nil {
					out.Permissions = new(GithubConf_249756142)
				}
				(*out.Permissions).UnmarshalEasyJSON(in)
			}
		case "private":
			out.Private = bool(in.Bool())
		case "pushed_at":
			out.PushedAt = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "ssh_url":
			out.SshUrl = string(in.String())
		case "stargazers_count":
			out.StargazersCount = int64(in.Int64())
		case "svn_url":
			out.SvnUrl = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "watchers_count":
			out.WatchersCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(out *jwriter.Writer, in GithubConf_2003163775) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.CloneUrl))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ForksCount))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitUrl))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"mirror_url\":"
		out.RawString(prefix)
		out.String(string(in.MirrorUrl))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			(*in.Owner).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil {
			out.RawString("null")
		} else {
			(*in.Permissions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.String(string(in.PushedAt))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SshUrl))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.StargazersCount))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnUrl))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.WatchersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf_2003163775) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf_2003163775) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf_2003163775) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf_2003163775) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConfGithubConf8(l, v)
}
func easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(in *jlexer.Lexer, out *GithubConf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clone_url":
			out.CloneUrl = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "fork":
			out.Fork = bool(in.Bool())
		case "forks_count":
			out.ForksCount = int64(in.Int64())
		case "full_name":
			out.FullName = string(in.String())
		case "git_url":
			out.GitUrl = string(in.String())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "homepage":
			out.Homepage = string(in.String())
		case "html_url":
			out.HtmlUrl = string(in.String())
		case "id":
			out.Id = int64(in.Int64())
		case "mirror_url":
			out.MirrorUrl = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "open_issues_count":
			out.OpenIssuesCount = int64(in.Int64())
		case "organization":
			if in.IsNull() {
				in.Skip()
				out.Organization = nil
			} else {
				if out.Organization == nil {
					out.Organization = new(GithubConf_216391827)
				}
				(*out.Organization).UnmarshalEasyJSON(in)
			}
		case "owner":
			if in.IsNull() {
				in.Skip()
				out.Owner = nil
			} else {
				if out.Owner == nil {
					out.Owner = new(GithubConf_240645118)
				}
				(*out.Owner).UnmarshalEasyJSON(in)
			}
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(GithubConf_2003163775)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				if out.Permissions == nil {
					out.Permissions = new(GithubConf_570840785)
				}
				(*out.Permissions).UnmarshalEasyJSON(in)
			}
		case "private":
			out.Private = bool(in.Bool())
		case "pushed_at":
			out.PushedAt = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(GithubConf_267759930)
				}
				(*out.Source).UnmarshalEasyJSON(in)
			}
		case "ssh_url":
			out.SshUrl = string(in.String())
		case "stargazers_count":
			out.StargazersCount = int64(in.Int64())
		case "subscribers_count":
			out.SubscribersCount = int64(in.Int64())
		case "svn_url":
			out.SvnUrl = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "watchers_count":
			out.WatchersCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(out *jwriter.Writer, in GithubConf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix[1:])
		out.String(string(in.CloneUrl))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.ForksCount))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitUrl))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HtmlUrl))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"mirror_url\":"
		out.RawString(prefix)
		out.String(string(in.MirrorUrl))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		if in.Organization == nil {
			out.RawString("null")
		} else {
			(*in.Organization).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		if in.Owner == nil {
			out.RawString("null")
		} else {
			(*in.Owner).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		if in.Parent == nil {
			out.RawString("null")
		} else {
			(*in.Parent).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil {
			out.RawString("null")
		} else {
			(*in.Permissions).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.String(string(in.PushedAt))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		if in.Source == nil {
			out.RawString("null")
		} else {
			(*in.Source).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SshUrl))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.StargazersCount))
	}
	{
		const prefix string = ",\"subscribers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.SubscribersCount))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnUrl))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.WatchersCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubConf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubConf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE232f50bEncodeGithubComKingsgrouposArchivistCliArchivistExampleConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubConf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubConf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE232f50bDecodeGithubComKingsgrouposArchivistCliArchivistExampleConf(l, v)
}
