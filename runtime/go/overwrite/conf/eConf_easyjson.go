// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5d27fa6dDecodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(in *jlexer.Lexer, out *EConf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "E1":
			out.E1 = int64(in.Int64())
		case "E2":
			out.E2 = int64(in.Int64())
		case "E3":
			out.E3 = int64(in.Int64())
		case "E5":
			if in.IsNull() {
				in.Skip()
				out.E5 = nil
			} else {
				in.Delim('[')
				if out.E5 == nil {
					if !in.IsDelim(']') {
						out.E5 = make([]int64, 0, 8)
					} else {
						out.E5 = []int64{}
					}
				} else {
					out.E5 = (out.E5)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.E5 = append(out.E5, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "E6":
			if in.IsNull() {
				in.Skip()
				out.E6 = nil
			} else {
				in.Delim('[')
				if out.E6 == nil {
					if !in.IsDelim(']') {
						out.E6 = make([]int64, 0, 8)
					} else {
						out.E6 = []int64{}
					}
				} else {
					out.E6 = (out.E6)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int64
					v2 = int64(in.Int64())
					out.E6 = append(out.E6, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "E7":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.E7 = make(map[string]int64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 int64
					v3 = int64(in.Int64())
					(out.E7)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "E8":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.E8 = make(map[string]int64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 int64
					v4 = int64(in.Int64())
					(out.E8)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d27fa6dEncodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(out *jwriter.Writer, in EConf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"E1\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.E1))
	}
	{
		const prefix string = ",\"E2\":"
		out.RawString(prefix)
		out.Int64(int64(in.E2))
	}
	{
		const prefix string = ",\"E3\":"
		out.RawString(prefix)
		out.Int64(int64(in.E3))
	}
	{
		const prefix string = ",\"E5\":"
		out.RawString(prefix)
		if in.E5 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.E5 {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"E6\":"
		out.RawString(prefix)
		if in.E6 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.E6 {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"E7\":"
		out.RawString(prefix)
		if in.E7 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.E7 {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.Int64(int64(v9Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"E8\":"
		out.RawString(prefix)
		if in.E8 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.E8 {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.Int64(int64(v10Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EConf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d27fa6dEncodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EConf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d27fa6dEncodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EConf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d27fa6dDecodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EConf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d27fa6dDecodeGithubComKingsgrouposArchivistRuntimeGoOverwriteConf(l, v)
}
